"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-z#6euuyce@ns6v$)(tx6z-e!6ui*ku!_adv*kc#v7db_h5ff^8'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'sitewomen.ru']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'django_extensions',
    "debug_toolbar",
    'social_django',

    'women.apps.WomenConfig',
    'users.apps.UsersConfig',
    'captcha',
    'django.contrib.sites',
    'django.contrib.sitemaps',
]

MIDDLEWARE = [
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # 'django.middleware.cache.UpdateCacheMiddleware',  # Используется при условии Кэширования всего сайта.
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.cache.FetchFromCacheMiddleware',  # Используется при условии Кэширования всего сайта.
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CACHE_MIDDLEWARE_ALIAS = 'default'  # Нижние 3 параметра используются при условии Кэширования всего сайта.
# CACHE_MIDDLEWARE_SECONDS = 10
# CACHE_MIDDLEWARE_KEY_PREFIX = 'sitewomen'


ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates'
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.contrib.messages.context_processors.messages',
                'users.context_processors.get_women_context'
            ],
        },
    },
]



WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
#
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'sitewomen_db',
        'USER': 'sitewomen',
        'PASSWORD': '123',
        'HOST': 'localhost',
        'PORT': 5432,
    }
}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379",
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ru-RU'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/' # строка с префиксом URL-адреса для статических файлов

# STATIC_ROOT = # путь к общей папке со статическими файлами (содержимое формируется командой collectstatic). Как понимаю при деплое проекта

# список дополнительных (нестандартных) путей к статическим файлам, используемых для сбора и для режима отладки
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

INTERNAL_IPS = ["127.0.0.1"]


MEDIA_ROOT = BASE_DIR / 'media' # каталог размещения медиа-файлов (для загрузки и чтения). Место загрузки файлов по умолчанию.

# Прописываем путь URL к медиа, чтоб при генерации url файлов из моделей, к ним прибавлялся /media/
# Не забываем прописать urlpatterns += (их конкатенация) в urls.py
MEDIA_URL = '/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = 'home' # задает URL-адрес, на который следует перенаправлять пользователя после успешной авторизации.
# приоритет ниже чем ниже чем у get_sucsess_url и чем у параметра next в forms.py, что хорошо.

LOGOUT_REDIRECT_URL = 'home' # задает URL-адрес, на который перенаправляется пользователя после выхода из системы
LOGIN_URL = 'users:login'  # определяет URL-адрес, на который следует перенаправить неавторизованного пользователя при попытке посетить закрытую страницу сайта

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend', # Аутентификация по умолчанию, если она одна, прописывать не обязательно
    'users.authentication.EmailAuthBackend', # Аутентификация, которую мы прописали сами (По Email) идет после стандатной
    'social_core.backends.github.GithubOAuth2',  # Аутентификация через Github при помощи библиотеки python-social-auth
]

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend" # настройка бэкенда для отправки электронной почты

EMAIL_HOST = 'smtp.gmail.com' # Host Google
EMAIL_PORT = 587 # Порт Google
EMAIL_HOST_USER = 'novozhilov812@gmail.com' # Почта от которой приходит письмо на смену пароля.
EMAIL_HOST_PASSWORD = 'uqol vejk egcy nphr' # Пароль генерируется из почты google, управление м паролей почты.
EMAIL_USE_SSL = False
EMAIL_USE_TLS = True # Предпочтительней чем SSL, пишут что более надежный метод защиты. Яндекс использует SSL.
EMAIL_ADMIN = EMAIL_HOST_USER # Делаем почту админа - стандартной почтой
SERVER_EMAIL = EMAIL_HOST_USER # Делаем почту сервера - стандартной почтой
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER # Делаем почту по умолчанию - стандартной почтой

AUTH_USER_MODEL = 'users.User'  # модель пользователя, используемая в текущем проекте
'''
Переопределяем модель User, на ту что прописали сами унаследованную от AbstractUser. 
Сначала имя используемой модели в текущем проекте фреймворка Django, по умолчанию использовалось значение 'auth.User'
'''

DEFAULT_USER_IMAGE = MEDIA_URL + 'users/default.png'


SOCIAL_AUTH_GITHUB_KEY = '7251532948a2447b330f'  # Ключ для аутентификации через GitHub
SOCIAL_AUTH_GITHUB_SECRET = '3f14d6f20bc936bc6caa4890291a5c0a14ad3b6d'  # Секретный ключ для аутентификации через GitHub

SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.user.create_user',
    'users.pipeline.new_users_handler',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
)

'''
В документации 'https://python-social-auth' сказано, что мы можем в файле settings.py определить свой 
модуль pipeline и прописать его в специальной коллекции, все другие модули в SOCIAL_AUTH_PIPELINE должны 
быть указаны, иначе наш пользовательский модуль может работать некорректно. Теперь нужно создать 
функцию new_users_handler() в users/pipeline.py
Это все нужно для присвоения текущему пользователю определенной группы прав доступа. 
SOCIAL_AUTH_PIPELINE запускается автоматически при авторизации через соц. сети
'''

SITE_ID = 1